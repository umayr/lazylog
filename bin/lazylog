#!/usr/bin/env node
'use strict';

var program = require('commander');
var constants = require('../utils/constants');
var exec = require('child_process').exec;
var chalk = require('chalk');
var parsers = require('../utils/parsers');
var utils = require('../utils/');

program
    .version(utils.version())
    .option('-n, --number <number>', 'number of commits', parsers.number)
    .option('-r, --regex <regex>', 'regex to filter log', parsers.regex)
    .option('-S, --since <since>', 'fetch commits from given date', parsers.date)
    .option('-A, --author <author>', 'fetch commits by given author name')
    .option('-m, --messages', 'show complete messages of filtered commits');

program
    .on('*', function (name) {
        console.log('\'' + name + '\' is not a known command. See \'lazylog --help\':');
        program.outputHelp();
        process.exit(1);
    });

program
    .parse(process.argv);

if (program.args.length < 1) {
    initiate();
}

function initiate() {
    exec('git show', function (err) {
        if (err !== null) error(err, 'fatal:');
        command();
    })
}

function command() {
    var cmd = makeCommand();

    exec(cmd, function (err, stdout) {
        if (err !== null) error(err);
        var commits = stdout.split('\n');
        //commits.pop();

        var output, matches;

        if (typeof program.regex !== 'undefined') {
            matches = parseCommits(commits);
            output = parseMatches(matches);
        }
        else if (typeof program.author !== 'undefined') {
            var toDisplay;

            if (typeof program.regex === 'undefined') {
                program.regex = '(.*?)';
                toDisplay = commits;
            }
            else {
                toDisplay = parseCommits(commits);
            }

            if (typeof program.messages === 'undefined')
                program.messages = true;

            output = parseMatches(toDisplay);
        }
        displayOutput(output);
        writeOutput(output);

        process.exit(1);
    });

    function parseCommits(commits) {
        var matches = [];
        for (var i = 0; i < commits.length; i++) {
            var commit = commits[i];
            var result = program.regex.test(commit);
            if (result) {
                matches.push(commit);
            }
        }
        return matches;
    }

    function makeCommand() {

        if (typeof program.regex === 'undefined' && typeof program.author === 'undefined')
            error('Thou must provide a regex to match.');

        if (program.since === -1)
            error('Thou shan\'t pass unless thy provide valid date.');

        var number = program.number || constants.NUMBER,
            format = program.format || constants.FORMAT,
            cmd = 'git log ';

        cmd += '--pretty=format:"%H|-|%an|-|%ad|-|%s" ';

        if (typeof program.since === 'undefined') {
            cmd += '-n ' + number + ' ';
        }
        else {
            cmd += '--since="' + program.since + '" ';
        }

        if (typeof program.author !== 'undefined')
            cmd += '--author="' + program.author + '" ';

        cmd += '--date=short';

        return cmd;
    }

    function parseMatches(matches) {

        var output = [];
        for (var i = 0; i < matches.length; i++) {
            var item = matches[i];
            var exact = item.match(program.regex)[0];
            var splited = item.split('|-|');

            var sha = splited[0];
            var author = splited[1];
            var date = splited[2];
            var message = splited[3];

            output.push({
                sha: sha,
                match: exact,
                author: author,
                date: date,
                message: message
            });
        }
        return output;
    }

    function writeOutput(output) {
        var data = '';

        data += makeTitle();

        for (var i = 0; i < output.length; i++) {
            data += output[i].sha + ' ';
            data += output[i].message + ' ';
            data += '(' + output[i].author + ')' + '\r\n';
        }

        utils.writeFile('change-log.txt', data, function () {
            console.log('\n' + chalk.white('Your changes have been logged into a text file successfully.'));
        });

        function makeTitle() {
            var title = 'Change Log (' + (new Date()).toLocaleDateString() + ')\r\n';
            var underline = '';
            for (var i = 0; i < (title.length - 2); i++) {
                underline += '=';
            }

            title += underline;
            title += '\r\n\r\n';

            return title;

        }
    }

    function displayOutput(output) {
        console.log('\n');
        if (output.length > 0) {
            var result;
            for (var i = 0; i < output.length; i++) {
                result = chalk.bold.magenta(output[i].sha + ':') + ' ';

                if (typeof program.messages === 'undefined') {
                    result += chalk.white(output[i].match);
                }
                else {
                    result += chalk.white(output[i].message);
                }

                console.log(result);
            }
            console.log('\n' + chalk.bgMagenta.white('Result:') + chalk.white(' Total ' + output.length + ' commits are filtered through your query.'));
        }
        else {
            console.log(chalk.white.bgRed('POO!') + chalk.red(' No commits to show.'));
            console.log(chalk.white('You might wanna check your arguments, bro.'));
        }
    }
}

function error(msg, trim) {
    if (typeof trim !== 'undefined') msg = (msg + '').split(trim)[1];
    console.log('\n' + chalk.white.bgRed('Error:') + ' ' + chalk.red((msg + '').trim()));
    process.exit(0);
}
